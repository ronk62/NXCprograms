#define GYRO_PORT IN_3        //Gyro on port 3
#define GYRO_Offset 603       //offset value to apply to the output value

int T=0, deltaT=0;
float currHeading=0, prevHeading=0;
long Gyro_val;
int i=1, pwr=20, target_heading;

long g_offset = 603;

task read()
{
// read gyro and calc heading
float tempHeading=0;
PlayTone(880, 1000);
while (true){
   T=CurrentTick();
   Gyro_val=SensorRaw(GYRO_PORT)-g_offset;  //read the gyro sensor
   if(abs(Gyro_val) > 3){
     tempHeading=prevHeading+(Gyro_val*deltaT/1000);
     if (tempHeading > 360)
       tempHeading -= 360;
     else if (tempHeading < 0)
       tempHeading += 360;
     currHeading=tempHeading;
     prevHeading=currHeading;
     Wait(100);
     deltaT=CurrentTick()-T;
     }
   }
}


task display()
{
  int dir=1;
  while(true){
     ClearLine(LCD_LINE1);
     NumOut(0, LCD_LINE1, Gyro_val);
     NumOut(20, LCD_LINE1, currHeading);
     NumOut(70, LCD_LINE1, deltaT);
     Wait(500);
  }
}


task move()
{
  Wait(500);
  while (true){
// calculate relative heading and use Proportional correction to pivot
// towards target heading..."relative_heading" is equal to the angle
// difference between "target_heading" and current compass heading
    target_heading=30;
    while (abs(target_heading - currHeading) > 1){
// do the needful (make the pivot turn)
     OnFwdReg(OUT_B, pwr, OUT_REGMODE_SPEED);
    }
// stop, wait and set new "target_heading" (new target heading)
    Off(OUT_B);
    ResetAllTachoCounts(OUT_BC);
    Wait(1000);
    RotateMotorEx(OUT_BC, 45, 2000, 0, true, true);
    ResetAllTachoCounts(OUT_BC);
    Wait(3000);

    target_heading=210;
    while (abs(target_heading - currHeading) > 1){
// do the needful (make the pivot turn)
     OnFwdReg(OUT_B, pwr, OUT_REGMODE_SPEED);
    }
// stop, wait and set new "target_heading" (new target heading)
    Off(OUT_B);
    ResetAllTachoCounts(OUT_BC);
    Wait(1000);
    RotateMotorEx(OUT_BC, 45, 2000, 0, true, true);
    ResetAllTachoCounts(OUT_BC);
    Wait(3000);
  }
}


task main()
{

  SetSensor(IN_3, SENSOR_LIGHT);
  Wait(1000);

  // calibrate offset
  while (i<10001){
   Gyro_val+=SensorRaw(GYRO_PORT);   //sum i samples of the gyro sensor
   NumOut(0, LCD_LINE1, i);
   i++;
   }

  g_offset=Gyro_val/10000;
  NumOut(70, LCD_LINE4, g_offset);
  PlayTone(440, 500);
  Wait(5000);
  
  Precedes(read, display, move);


}

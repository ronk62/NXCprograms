/************************************************************************/
/*                                                                      */
/* Program Name: ACCL-Nx-demo.nxc */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2008 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 08/22/08    Deepak Patil    Initial authoring.
 */
const byte SensorPort  =  IN_3;
//#define ADDR     0x0e
//#define ADDR     0x16
#define ADDR     0x02

#include "accl-nx-lib.nxc"

int cb, cb_old;

task button_handler()
{
  while (true) {
  
     if ( ButtonPressed(BTNCENTER, true) ) {
         while (ButtonPressed(BTNCENTER, true)) ;            //debounce the switch
      if ( cb >= 4 ) {
			  cb = 0;
		  } else {
			  cb ++;
			}
    }

    Wait(100);   // don't hog the CPU.
  }// end of while
}

task main()
{
  string msg;
  accl currAccl;
  string ax, ay, az, tx, ty, tz;
	byte b;
	int a;

	cb = 0;
	cb_old = 1;
	StartTask(button_handler);
	a = 0;
  
  
  while (true ) {

		if ( cb_old != cb ) {
			switch (cb) {
			case 0:
				TextOut(0, LCD_LINE1, "2.5 G   ", false);
				ACCL_SendCommand(SensorPort, ADDR, '1');
				break;
			case 1:
				TextOut(0, LCD_LINE1, "3.3 G   ", false);
				ACCL_SendCommand(SensorPort, ADDR, '2');
				break;
			case 2:
				TextOut(0, LCD_LINE1, "6.7 G   ", false);
				ACCL_SendCommand(SensorPort, ADDR, '3');
				break;
			case 3:
				TextOut(0, LCD_LINE1, "10.0 G   ", false);
				ACCL_SendCommand(SensorPort, ADDR, '4');
				Wait(100);
				break;
			}
		  cb_old = cb;
			Wait(100);
		}
		/*
		 * read the values from the sensor.
		 */
    ACCL_ReadAcceleration(SensorPort, ADDR, currAccl);

    msg = "X:            ";
    ax = NumToStr(currAccl.ax);
    msg = StrReplace(msg, 2, ax);
    tx = NumToStr(currAccl.tx);
    msg = StrReplace(msg, 8, tx);
    TextOut(0, LCD_LINE2, msg, false);

    msg = "Y:            ";
    ay = NumToStr(currAccl.ay);
    msg = StrReplace(msg, 2, ay);
    ty = NumToStr(currAccl.ty);
    msg = StrReplace(msg, 8, ty);
    TextOut(0, LCD_LINE3, msg, false);

    msg = "Z:            ";
    az = NumToStr(currAccl.az);
    msg = StrReplace(msg, 2, az);
    tz = NumToStr(currAccl.tz);
    msg = StrReplace(msg, 8, tz);
    TextOut(0, LCD_LINE4, msg, false);

    Wait(50);
  }

}

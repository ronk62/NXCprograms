/************************************************************************/
/*                                                                      */
/* ***MODIFIED version of...*** IMU-demo.nxc */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2012 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 04/19/12    Deepak Patil    Adapted from ACCL file.
 */


// HT Compass declarations
int HTcmps_val;

 
// HT Gyro declarations
#define GYRO_PORT IN_3        //Gyro on port 3
#define GYRO_Offset 603       //offset value to apply to the output value

int T=0, deltaT;
long currHeading=0, prevHeading=0, HTgyro_val;
int i=1;

long g_offset = 603;


// MS IMU declarations
const byte IMUsensorPort  =  IN_1;
#define ADDR     0x22

#include "IMU-lib.nxc"

int cb, cb_old;

int IMUcmps_val;

int MSgyro_val, MScurrHeading=0, MSprevHeading=0;
accl currAccl;
gyro currGyro;


// i2cReadString Function
string i2cReadString(byte prt, byte adr, byte reg, byte cnt)
{
  byte outbuf[];
  byte cmdbuf[];
  string temp = "";
  
  ArrayBuild(cmdbuf, adr, reg);
  byte nByteReady = 0;
  while (I2CStatus(prt, nByteReady) ==  STAT_COMM_PENDING)
  {
  // Wait for I2C bus to be ready
  }
  
  if(I2CBytes(prt, cmdbuf, cnt, outbuf))
  {
    temp = ByteArrayToStr(outbuf);
  }
  return temp;
}


task button_handler()
{
  while (true) {
  
     if ( ButtonPressed(BTNCENTER, true) ) {
         while (ButtonPressed(BTNCENTER, true)) ;            //debounce the switch
      if ( cb >= 4 ) {
			  cb = 0;
		  } else {
			  cb ++;
			}
    }

    Wait(100);   // don't hog the CPU.
  }// end of while
}

void IMU_Readb1b2(byte port, byte i2cAddr)
{
  byte message[];
  byte buf[12];
  int count;
  byte nByteReady = 0;
  string msg, b1, b2;

  SetSensorLowspeed(port);

	msg = "                  ";
  ArrayBuild(message, i2cAddr, 0x45);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 2;
  if(I2CBytes(port, message, count, buf)) {
    b1 = NumToStr(buf[0]);
    msg = StrReplace(msg, 2, b1);
    b2 = NumToStr(buf[1]);
    msg = StrReplace(msg, 6, b2);
    TextOut(0, LCD_LINE6, msg, false);
	}
}

task read_gyros()
{
// read gyros and calc headings
PlayTone(880, 500);
deltaT=0;
while (true){
   T=CurrentTick();
   HTgyro_val=SensorRaw(GYRO_PORT)-g_offset;  //read the gyro sensor
     if(abs(HTgyro_val) > 1){
     currHeading=prevHeading+(HTgyro_val*deltaT/1000);
     if (currHeading > 360)
       currHeading -= 360;
     else if (currHeading < 0)
       currHeading += 360;
     prevHeading=currHeading;
   IMU_ReadGyro(IMUsensorPort, ADDR, currGyro);
   MSgyro_val=currGyro.gz/114;
     if(abs(MSgyro_val) > 1){
     MScurrHeading=MSprevHeading+(MSgyro_val*deltaT/1000);
     if (MScurrHeading > 360)
       MScurrHeading -= 360;
     else if (MScurrHeading < 0)
       MScurrHeading += 360;
     MSprevHeading=MScurrHeading;
     Wait(100);
     deltaT=CurrentTick()-T;
     }
   }
} //end while
}

task read_compasses()
{
  Wait(1000);
  while(true){

  // PlayTone(600, 250);
  // Wait(300);
  // PlayTone(1200, 250);

    HTcmps_val = SensorHTCompass(S2);
    IMUcmps_val = IMU_ReadCompassHeading(IMUsensorPort, ADDR);
    Wait(100);
  }
}


task display()
{
  while(true){
  
  		if ( cb_old != cb ) {
			switch (cb) {
			case 0:
				TextOut(0, LCD_LINE1, "G LEVEL: 2 G   ", false);
				IMU_SendCommand(IMUsensorPort, ADDR, '1');
				break;
			case 1:
				TextOut(0, LCD_LINE1, "G LEVEL: 4 G   ", false);
				IMU_SendCommand(IMUsensorPort, ADDR, '2');
				break;
			case 2:
				TextOut(0, LCD_LINE1, "G LEVEL: 8 G   ", false);
				IMU_SendCommand(IMUsensorPort, ADDR, '3');
				break;
			case 3:
				TextOut(0, LCD_LINE1, "G LEVEL: 16.0 G   ", false);
				IMU_SendCommand(IMUsensorPort, ADDR, '4');
				break;
			}
		  cb_old = cb;
			Wait(100);
		} //end if/case
		
     ClearLine(LCD_LINE4);
     ClearLine(LCD_LINE5);
     ClearLine(LCD_LINE6);
     ClearLine(LCD_LINE7);
     TextOut(30, LCD_LINE4, "HTcmps_val", false);
     TextOut(30, LCD_LINE5, "IMUcmps_val", false);
     TextOut(30, LCD_LINE6, "HTgyro currHeading", false);
     TextOut(30, LCD_LINE7, "MSgyro currHeading", false);
     NumOut(0, LCD_LINE4, HTcmps_val);
     NumOut(0, LCD_LINE5, IMUcmps_val);
     NumOut(0, LCD_LINE6, currHeading);
     NumOut(0, LCD_LINE7, MScurrHeading);
     //NumOut(0, LCD_LINE7, MSgyro_val);
     Wait(500);
  } //end while
}


task move()
{
  int a,n,pwr;
  while (true ) {

    PlayTone(600, 250);
    Wait(300);
    PlayTone(1200, 250);

    pwr=35+Random(45);
    OnFwd(OUT_A, pwr);
    Wait(100+Random(900));
    Off(OUT_A);

    //Wait(SEC_3);

  } //end while
}

  
task main()
{
  string msg;
  string ax, ay, az, tx, ty, tz, gx, gy, gz;
	byte b;
	int a;

	cb = 0;
	cb_old = 1;

  SetSensor(IN_3, SENSOR_LIGHT);
  SetSensorLowspeed(S2);
  IMU_Init(IMUsensorPort);
  
	start button_handler;
	start read_compasses;
	start read_gyros;
 	start display;
 	//start move;
	
	a = 0;

  
  while (true ) {
  

		/*
		 * read the values from the sensor.
		 */
    IMU_ReadAcceleration(IMUsensorPort, ADDR, currAccl);

    Wait(SEC_15);
    
  } //end while

}
